// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/mqtt/plug.proto

package omo_msp_mqtt

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PlugService service

type PlugService interface {
	AddOne(ctx context.Context, in *ReqPlugAdd, opts ...client.CallOption) (*ReplyPlugOne, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPlugOne, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyPlugList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateBase(ctx context.Context, in *ReqPlugUpdate, opts ...client.CallOption) (*ReplyPlugOne, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyPlugOne, error)
}

type plugService struct {
	c    client.Client
	name string
}

func NewPlugService(name string, c client.Client) PlugService {
	return &plugService{
		c:    c,
		name: name,
	}
}

func (c *plugService) AddOne(ctx context.Context, in *ReqPlugAdd, opts ...client.CallOption) (*ReplyPlugOne, error) {
	req := c.c.NewRequest(c.name, "PlugService.AddOne", in)
	out := new(ReplyPlugOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plugService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPlugOne, error) {
	req := c.c.NewRequest(c.name, "PlugService.GetOne", in)
	out := new(ReplyPlugOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plugService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "PlugService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plugService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyPlugList, error) {
	req := c.c.NewRequest(c.name, "PlugService.GetByFilter", in)
	out := new(ReplyPlugList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plugService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "PlugService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plugService) UpdateBase(ctx context.Context, in *ReqPlugUpdate, opts ...client.CallOption) (*ReplyPlugOne, error) {
	req := c.c.NewRequest(c.name, "PlugService.UpdateBase", in)
	out := new(ReplyPlugOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plugService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyPlugOne, error) {
	req := c.c.NewRequest(c.name, "PlugService.UpdateByFilter", in)
	out := new(ReplyPlugOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlugService service

type PlugServiceHandler interface {
	AddOne(context.Context, *ReqPlugAdd, *ReplyPlugOne) error
	GetOne(context.Context, *RequestInfo, *ReplyPlugOne) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyPlugList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateBase(context.Context, *ReqPlugUpdate, *ReplyPlugOne) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyPlugOne) error
}

func RegisterPlugServiceHandler(s server.Server, hdlr PlugServiceHandler, opts ...server.HandlerOption) error {
	type plugService interface {
		AddOne(ctx context.Context, in *ReqPlugAdd, out *ReplyPlugOne) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyPlugOne) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyPlugList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateBase(ctx context.Context, in *ReqPlugUpdate, out *ReplyPlugOne) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyPlugOne) error
	}
	type PlugService struct {
		plugService
	}
	h := &plugServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PlugService{h}, opts...))
}

type plugServiceHandler struct {
	PlugServiceHandler
}

func (h *plugServiceHandler) AddOne(ctx context.Context, in *ReqPlugAdd, out *ReplyPlugOne) error {
	return h.PlugServiceHandler.AddOne(ctx, in, out)
}

func (h *plugServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyPlugOne) error {
	return h.PlugServiceHandler.GetOne(ctx, in, out)
}

func (h *plugServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.PlugServiceHandler.RemoveOne(ctx, in, out)
}

func (h *plugServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyPlugList) error {
	return h.PlugServiceHandler.GetByFilter(ctx, in, out)
}

func (h *plugServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.PlugServiceHandler.GetStatistic(ctx, in, out)
}

func (h *plugServiceHandler) UpdateBase(ctx context.Context, in *ReqPlugUpdate, out *ReplyPlugOne) error {
	return h.PlugServiceHandler.UpdateBase(ctx, in, out)
}

func (h *plugServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyPlugOne) error {
	return h.PlugServiceHandler.UpdateByFilter(ctx, in, out)
}
